{"version":3,"sources":["components/Task.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Task","task","completeTask","className","taskName","deadline","onClick","App","useState","setTask","setDeadline","todo","setTodo","handleChange","event","target","name","value","Number","taskToDel","filter","type","placeholder","onChange","newTask","map","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNA2BeA,EAnBF,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,KAAMC,EAA0B,EAA1BA,aACpB,OACE,sBAAKC,UAAU,OAAf,UACE,sBAAKA,UAAU,UAAf,UACE,+BAAOF,EAAKG,WACZ,gFAAgBH,EAAKI,SAArB,sBAEF,wBACCF,UAAU,eACVG,QAAS,WACPJ,EAAaD,EAAKG,WAHrB,4DCsDSG,EAhEC,WAAO,IAAD,EACIC,mBAAiB,IADrB,mBACbP,EADa,KACPQ,EADO,OAEYD,mBAAiB,GAF7B,mBAEbH,EAFa,KAEHK,EAFG,OAGIF,mBAAkB,IAHtB,mBAGbG,EAHa,KAGPC,EAHO,KAKdC,EAAe,SAACC,GACM,SAAtBA,EAAMC,OAAOC,KACfP,EAAQK,EAAMC,OAAOE,OAErBP,EAAYQ,OAAOJ,EAAMC,OAAOE,SAW9Bf,EAAe,SAACiB,GACpBP,EAAQD,EAAKS,QAAO,SAACnB,GACnB,OAAOA,EAAKG,WAAae,OAI7B,OACE,sBAAKhB,UAAU,MAAf,UACE,sBAAKA,UAAU,SAAf,UACE,sBAAKA,UAAU,YAAf,UACE,uBACEA,UAAU,mBACVkB,KAAK,OACLC,YAAY,0CACZN,KAAK,OACLC,MAAOhB,EACPsB,SAAUV,IAEZ,uBACEV,UAAU,mBACVkB,KAAK,SACLC,YAAY,gDACZN,KAAK,WACLC,MAAOZ,EACPkB,SAAUV,OAGd,wBAAQV,UAAU,cAAcG,QAlCtB,WACd,IAAMkB,EAAU,CAAEpB,SAAUH,EAAMI,SAAUA,GAC5CO,EAAQ,GAAD,mBAAKD,GAAL,CAAWa,KAClBf,EAAQ,IACRC,EAAY,IA8BR,iEAIF,qBAAKP,UAAU,YAAf,SACGQ,EAAKc,KAAI,SAACxB,EAAayB,GACtB,OAAO,cAAC,EAAD,CAEPzB,KAAMA,EACNC,aAAcA,GAFTwB,YC7CAC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.dbceae1c.chunk.js","sourcesContent":["import React  from \"react\";\nimport {ITask} from \"../Interfaces\";\n\ninterface Props {\n  task : ITask;\n  completeTask(taskToDel: string): void;\n}\n\nconst Task = ({ task, completeTask }: Props) => {\n  return (\n    <div className=\"task\">\n      <div className=\"content\">\n        <span>{task.taskName}</span>\n        <span>Дедлайн: {task.deadline} дн</span>\n      </div>\n      <button\n       className=\"content__btn\"\n       onClick={() => {\n         completeTask(task.taskName)\n       }}\n       >\n         Удалить\n      </button>\n    </div>\n  )\n};\n\nexport default Task;","import React, { ChangeEvent, FC, useState } from \"react\";\nimport \"./App.css\";\nimport { ITask } from \"./Interfaces\";\nimport Task from \"./components/Task\";\n\nconst App: FC = () => {\n  const [task, setTask] = useState<string>(\"\");\n  const [deadline, setDeadline] = useState<number>(0);\n  const [todo, setTodo] = useState<ITask[]>([]);\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>): void => {\n    if (event.target.name === \"task\") {\n      setTask(event.target.value);\n    } else {\n      setDeadline(Number(event.target.value));\n    }\n  };\n\n  const addTask = (): void => {\n    const newTask = { taskName: task, deadline: deadline };\n    setTodo([...todo, newTask]);\n    setTask(\"\");\n    setDeadline(0);\n  };\n\n  const completeTask = (taskToDel: string): void => {\n    setTodo(todo.filter((task) => {\n      return task.taskName !== taskToDel\n    }))\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"header\">\n        <div className=\"container\">\n          <input\n            className=\"container__input\"\n            type=\"text\"\n            placeholder=\"Задача...\"\n            name=\"task\"\n            value={task}\n            onChange={handleChange}\n          />\n          <input\n            className=\"container__input\"\n            type=\"number\"\n            placeholder=\"Дедлайн...\"\n            name=\"deadline\"\n            value={deadline}\n            onChange={handleChange}\n          />\n        </div>\n        <button className=\"header__btn\" onClick={addTask}>\n          Добавить\n        </button>\n      </div>\n      <div className=\"todo-list\">\n        {todo.map((task: ITask, index: number) => {\n          return <Task \n          key={index} \n          task={task}\n          completeTask={completeTask}\n          />;\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}